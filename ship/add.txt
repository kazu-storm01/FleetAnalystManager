重要な設計変更: URL中心 → 艦隊データ中心

  旧仕様との根本的差異

  - 旧: 艦隊情報URLの保存・管理が主目的
  - 新: 艦隊JSONデータの直接解析・統計化が主目的
  - 旧: URLリンク中心のワークフロー
  - 新: データ駆動型の成長追跡ワークフロー

  アーキテクチャ転換

  - データ入力: URL文字列 → JSON艦隊データ直接ペースト
  - 解析エンジン: リンク管理 → リアルタイム統計算出
  - 保存形式: URL + メタデータ → 解析済み数値 + タスク状態
  - 表示優先度: リンク集 → 成長グラフ・統計ダッシュボード

  主要機能一覧

  1. JSON艦隊データ解析システム（新機能）

  - リアルタイム解析: JSONペースト時の即座統計算出
  - 艦船データ走査: 配列形式艦隊データの自動パース
  - 経験値集計: ship.exp[0]値の全艦合算
  - レベル判定: ship.lv値によるケッコン艦自動カウント
  - データ検証: 不正JSON・構造異常の例外処理

  2. 統計自動算出エンジン

  - 合計経験値: 全艦の経験値合算（exp[0]配列要素）
  - 所持艦数: 配列length自動カウント
  - ケッコン艦数: lv >= 100条件での自動判定
  - 差分計算: 前回データとの数値変化リアルタイム表示
  - プレビュー機能: 登録前の統計値事前確認

  3. データ管理システム

  - 提督名管理: 個別提督ごとのデータ分離保持
  - 履歴管理: 時系列順での全登録データ保存
  - LocalStorage永続化: ブラウザローカルでの完全オフライン動作
  - バックアップ/復元:
  JSON形式でのデータエクスポート・インポート機能
  - データ制限: 最大100エントリー、自動古データ削除

  4. タスク管理システム

  - 動的タスク追加: エントリーごとに最大50タスク
  - 継続タスク機能: 未完了タスクの自動引き継ぎ（空欄除外）
  - 進捗表示: チェックボックス式完了管理とプログレスバー
  - 空欄タスク自動削除: 保存時の無効データクリーンアップ
  - 継続履歴追跡: 元タスクID保持での継続関係管理

  5. 成長追跡・可視化機能

  - 折れ線グラフ: 経験値・艦数・ケッコン数の時系列推移
  - 自動スケーリング: グラフ溢れ防止の動的Y軸調整
  - 差分ハイライト: 前回比増減の視覚的表示
  - 統計モーダル: 詳細データテーブル・タブ切替表示
  - レスポンシブ対応: モバイルデバイス最適化

  6. URLリンク機能（補助機能に変更）

  - 任意URL追加: 艦隊情報ページへの参照リンク保存
  - URL検証: 基本的な形式・到達可能性チェック
  - リンク管理: 外部ページへの直接アクセス機能
  - 編集・削除: 最新エントリーでのURL変更対応

  UI/UX設計思想

  データ中心設計

  - JSON入力重視: 大型入力欄でのメイン操作領域
  - リアルタイム反映: 入力即座の統計値表示
  - 成長可視化: グラフ・差分表示での進捗重視
  - 履歴重要性: 過去データとの比較機能強化

  コンパクト化原則

  - 省スペース設計: 全要素の最小限サイズ調整
  - 情報密度向上: 限られた画面領域での最大情報表示
  - 視覚的階層: 重要度による要素サイズ調整

  バッジシステム

  - ステータス表示: 最新/過去の小型バッジ表示
  - 統計バッジ: 経験値・艦数・ケッコン数の横並び配置
  - 差分インジケーター: 増減値の色分け表示（緑:増加、赤:減少）

  カラーテーマ統一

  - 最新データ: 青系グラデーション (#4096ff基調)
  - 過去データ: 灰色系統一 (#e9ecef, #adb5bd)
  - 差分表示: 緑(増加)・赤(減少)・灰(変化なし)
  - 入力無効化: 過去データの読み取り専用表示

  技術仕様

  フロントエンド

  - React 18+ TypeScript: 型安全な開発環境
  - CSS3: Grid・Flexbox レイアウト、アニメーション
  - SVG: 折れ線グラフの動的生成・パス計算
  - FileAPI: バックアップファイル操作
  - JSON Parser: 艦隊データリアルタイム解析

  データ構造

  interface FleetEntry {
    id: number;
    totalExp: number;        // 自動算出: 全艦経験値合計
    shipCount: number;       // 自動算出: 艦船数
    marriedCount: number;    // 自動算出: ケッコン艦数
    tasks: Task[];
    url?: string;           // 任意: 関連URLリンク
    createdAt: string;
    admiralName: string;
    isLatest: boolean;
  }

  interface Task {
    id: number;
    text: string;
    completed: boolean;
    createdAt: string;
    inheritedFrom?: number;     // 継続元エントリーID
    originalTaskId?: number;    // 元タスクID追跡
  }

  // 艦隊JSON想定構造
  interface ShipData {
    exp: number[];    // [現在経験値, ...]
    lv: number;       // レベル
    // その他艦船データ...
  }

  JSON解析ロジック

  const calculateFleetStats = (jsonData: string) => {
    const shipData = JSON.parse(jsonData);
    let totalExpValue = 0;
    let shipCountValue = 0;
    let marriedCountValue = 0;

    shipData.forEach(ship => {
      if (ship.exp && Array.isArray(ship.exp)) {
        totalExpValue += (ship.exp[0] || 0);
      }
      shipCountValue++;
      if (ship.lv && ship.lv >= 100) {
        marriedCountValue++;
      }
    });

    return { totalExpValue, shipCountValue, marriedCountValue
  };
  };

  制限事項

  - エントリー上限: 100件（自動古データ削除）
  - タスク上限: エントリーあたり50件
  - JSON形式: 艦隊配列構造必須
  - ブラウザ依存: LocalStorage容量制限
  - オフライン動作: ネットワーク不要

  今回の重大変更詳細

  1. コア機能転換: URL管理 → JSON解析

  - 入力方法変更: URL文字列 → JSON艦隊データ直接ペースト
  - 解析エンジン新設: リアルタイム艦船データ統計算出
  - ワークフロー変更: リンク保存 → データ成長追跡
  - 価値提案変更: 情報管理 → 進捗可視化

  2. グラフシステム大幅刷新

  - 棒グラフ→折れ線グラフ: SVGベース動的生成
  - 自動スケーリング: 最大値溢れ防止機能
  - マージン計算: 10%余白での見切れ対策
  - エラーハンドリング: データ異常時の安全表示

  3. UI全面コンパクト化

  - 要素サイズ統一削減: padding/margin 20-30%削減
  - フォントサイズ調整: 0.8-0.9em統一
  - カード間隔最適化: 視認性維持での最小化
  - レスポンシブ強化: モバイル対応改善

  4. バックアップシステム実装

  - JSON形式エクスポート: 日付付きファイル名
  - インポート検証: データ整合性チェック
  - 提督名相違警告: 異なるユーザーデータ警告
  - エラーハンドリング: 不正ファイル対応

  5. 視覚的統一性改善

  - 過去データ灰色統一: URL・タスク入力欄
  - 読み取り専用表示: 過去データ編集防止
  - アイコン整理: 不要要素削除（過去データの⚓マーク等）
  - バッジシステム: ステータス表示統一

  6. データ駆動型機能追加

  - 差分プレビュー: 登録前の変化量表示
  - 統計ダッシュボード: 提督情報カード
  - 成長履歴: 時系列データでの進捗追跡
  - 自動継続: 未完了タスクの引き継ぎ最適化

  運用・保守考慮

  データ整合性

  - JSON検証: 不正形式・構造異常の例外処理
  - 型チェック: TypeScript型安全性
  - 自動クリーンアップ: 空データ除去
  - バリデーション: 数値範囲・必須項目検証

  ユーザビリティ

  - 直感的操作: Ctrl+Enter登録ショートカット
  - 視覚フィードバック: トースト通知、差分ハイライト
  - 状態表示: ローディング・エラー・検証中表示
  - アクセシビリティ: キーボード操作対応

  パフォーマンス最適化

  - 条件レンダリング: 不要DOM削減
  - メモ化最適化: 再計算防止
  - 遅延ローディング: 大量データ対応
  - CSS最適化: 描画負荷軽減

  拡張性設計

  - モジュール分離: JSON解析エンジン独立性
  - 設定外部化: 艦船レベル閾値等の定数管理
  - API準備: バックエンド統合対応（解析済みデータ送信）
  - プラグイン設計: 他ゲーム・データ形式対応容易性

  今後の統合時考慮事項

  メインアプリ統合での注意点

  - データ移行: 既存URL管理データの変換方針
  - 機能共存: URL機能の補助的位置づけ維持
  - パフォーマンス: JSON解析処理の最適化
  - ユーザー教育: 新ワークフローの説明・移行支援

  この仕様書は従来のURL管理アプリからJSON艦隊データ解析・成長追
  跡アプリへの根本的転換を含む、今回実装した全機能を網羅し、将
  来のメインアプリ統合時の技術的指針として活用可能です。